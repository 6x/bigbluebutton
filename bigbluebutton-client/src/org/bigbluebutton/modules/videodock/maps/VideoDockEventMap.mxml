<?xml version="1.0" encoding="utf-8"?>

<!--
BigBlueButton open source conferencing system - http://www.bigbluebutton.org

Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).

BigBlueButton is free software; you can redistribute it and/or modify it under the 
terms of the GNU Lesser General Public License as published by the Free Software 
Foundation; either version 2.1 of the License, or (at your option) any later 
version. 

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along 
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

$Id: $
-->

<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">
	<mx:Script>
		<![CDATA[
      import mx.events.FlexEvent;
      
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.common.events.CloseWindowEvent;
      import org.bigbluebutton.common.events.OpenWindowEvent;
      import org.bigbluebutton.main.events.BBBEvent;
      import org.bigbluebutton.modules.videodock.events.ConnectionEvent;
      import org.bigbluebutton.modules.videodock.events.VideoDisplayReadyEvent;
      import org.bigbluebutton.modules.videodock.events.VideoDockEvent;
      import org.bigbluebutton.modules.videodock.views.VideoDock;
			
			private var videoDock:VideoDock;
			
			public function startModule():void{
				videoDock = new VideoDock();			

				var windowEvent:OpenWindowEvent = new OpenWindowEvent(OpenWindowEvent.OPEN_WINDOW_EVENT);
				windowEvent.window = videoDock;
				globalDispatcher.dispatchEvent(windowEvent);
			}
			
			public function stopModule():void {
				videoDock.removeAllChildren();
			}
			
		]]>
	</mx:Script>
  
  <!-- ~~~~~~~~~~~~~~~~~~    HANDLERS     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <EventHandlers type="{VideoDockEvent.START}">
    <ObjectBuilder generator="{VideoDockEventMapDelegate}" cache="global" constructorArguments="{scope.dispatcher}"/>
    <MethodInvoker generator="{VideoDockEventMapDelegate}" method="start"/>
  </EventHandlers>
  
<!--  
  <EventHandlers type="{VideoDockEvent.STOP}">
    <MethodInvoker generator="{WhiteboardManager}" method="handleStartModuleEvent" />
  </EventHandlers>
 -->
  
  <EventHandlers type="{ConnectionEvent.UP}">
    <MethodInvoker generator="{VideoDockEventMapDelegate}" method="connectionUp" arguments="{event}"/>
  </EventHandlers>
 
 
  <EventHandlers type="{BBBEvent.OPEN_WEBCAM_WINDOWS}" >
    <MethodInvoker generator="{VideoDockEventMapDelegate}" method="openWebcamWindows"/>
  </EventHandlers>
 
  <EventHandlers type="{VideoDisplayReadyEvent.DISPLAY_READY}" >
    <MethodInvoker generator="{VideoDockEventMapDelegate}" method="videoDisplayReady" arguments="{event.userID}"/>
  </EventHandlers>
  
  <!-- ~~~~~~~~~~~~~~~~~~    INJECTORS     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!--
  <Injectors target="{VideoDockEventMapDelegate}" >
    <ObjectBuilder generator="{VideoDockEventMapDelegate}" cache="global" constructorArguments="{scope.dispatcher}"/>
  </Injectors>
-->	
</EventMap>