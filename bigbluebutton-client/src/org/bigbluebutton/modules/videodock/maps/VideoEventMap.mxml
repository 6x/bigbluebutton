<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">
	<mx:Script>
		<![CDATA[
      import mx.collections.ArrayCollection;     
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.common.events.OpenWindowEvent;
      import org.bigbluebutton.common.events.ToolbarButtonEvent;
      import org.bigbluebutton.core.UsersUtil;
      import org.bigbluebutton.core.managers.UserManager;
      import org.bigbluebutton.main.events.BBBEvent;
      import org.bigbluebutton.main.events.MadePresenterEvent;
      import org.bigbluebutton.main.events.ParticipantJoinEvent;
      import org.bigbluebutton.main.model.users.BBBUser;
      import org.bigbluebutton.main.model.users.events.BroadcastStartedEvent;
      import org.bigbluebutton.main.model.users.events.BroadcastStoppedEvent;
      import org.bigbluebutton.main.model.users.events.StreamStartedEvent;
      import org.bigbluebutton.modules.videodock.business.VideoProxy;
      import org.bigbluebutton.modules.videodock.events.CloseAllWindowsEvent;
      import org.bigbluebutton.modules.videodock.events.ClosePublishWindowEvent;
      import org.bigbluebutton.modules.videodock.events.OpenVideoWindowEvent;
      import org.bigbluebutton.modules.videodock.events.ShareCameraRequestEvent;
      import org.bigbluebutton.modules.videodock.events.StartBroadcastEvent;
      import org.bigbluebutton.modules.videodock.events.StopBroadcastEvent;
      import org.bigbluebutton.modules.videodock.model.VideoConfOptions;
      import org.bigbluebutton.modules.videodock.views.PublishWindow;
      import org.bigbluebutton.modules.videodock.views.ToolbarButton;
      import org.bigbluebutton.modules.videodock.views.VideoWindow;
      import org.bigbluebutton.modules.videodock.views.WebcamWindow;
      import org.bigbluebutton.modules.viewers.events.ViewCameraEvent;
      import org.flexunit.runner.manipulation.filters.IncludeAllFilter;
			
			private var button:ToolbarButton;
//			private var publishWindow:PublishWindow;
//      private var proxy:VideoProxy;
      
      private var webcamWindows:WindowManager = new WindowManager();

      private var videoOptions:VideoConfOptions = new VideoConfOptions();
      
			// This variable is used to avoid dispatching the BroadcastStoppedEvent
			// when the user just open the publish window and close it before start
			// publishing
			private var _publishing:Boolean = false;		
			
      private function openWebcamWindows():void {
        var uids:ArrayCollection = UsersUtil.getUserIDs();
        
        for (var i:int = 0; i < uids.length; i++) {
          var u:String = uids.getItemAt(i) as String;
          openWebcamWindow(u);
        }
      }
      
      private function openVideoWindow(event:ParticipantJoinEvent):void {
        var userID:String = event.userID;
        if (webcamWindows.hasWindow(userID)) return;
        
        openWebcamWindow(userID);
      }
      
      private function openWebcamWindow(userID:String):void {
        if (UsersUtil.isMe(userID)) return;
        
        if (webcamWindows.hasWindow(userID)) return;
        
        var window:WebcamWindow = webcamWindows.addWindow(userID);
        window.title = UsersUtil.getUserName(userID);
        
        var windowEvent:OpenWindowEvent = new OpenWindowEvent(OpenWindowEvent.OPEN_WINDOW_EVENT);
//        windowEvent.window = window;
//        globalDispatcher.dispatchEvent(windowEvent);
        
        // this event will dock the window, if it's enabled
        var openVideoEvent:OpenVideoWindowEvent = new OpenVideoWindowEvent();
 //       openVideoEvent.window = window;
 //       globalDispatcher.dispatchEvent(openVideoEvent);        
      }
      
			private function viewCamera(userID:String, stream:String, name:String, mock:Boolean = false):void {
        if (! webcamWindows.hasWindow(userID)) {
          openWebcamWindow(userID);
        }
				
        if (webcamWindows.hasWindow(userID)) {
          var window:WebcamWindow = webcamWindows.getWindow(userID);
 //         window.resolutions = videoOptions.resolutions.split(",");
          
          if (mock) {
//            window.startVideo(module.mockConnection, stream);
          } else {
 //           window.startVideo(proxy.connection, stream);
          }          
        }
			}

			private function viewVideoFile(e:BBBEvent):void {
				viewCamera("1", e.message, e.message, true);
			}
			
			private function mockConnect():void {
	//			module.mockConnect();
			}
			
			public function addToolbarButton():void {     
        var videoOptions:VideoConfOptions = new VideoConfOptions();
 //       proxy = new VideoProxy(videoOptions.uri);
        
				if (videoOptions.showButton) {
					button = new ToolbarButton();	  
					button.isPresenter = ! videoOptions.presenterShareOnly;
					var event:ToolbarButtonEvent = new ToolbarButtonEvent(ToolbarButtonEvent.ADD);
					event.button = button;
					globalDispatcher.dispatchEvent(event);
				}
			}
			
			private function openPublishWindow():void{
//				publishWindow = new PublishWindow();
//				publishWindow.quality = videoOptions.videoQuality;
//				publishWindow.resolutions = videoOptions.resolutions.split(",");
				
//				var windowEvent:OpenWindowEvent = new OpenWindowEvent(OpenWindowEvent.OPEN_WINDOW_EVENT);
//				windowEvent.window = publishWindow;
//				globalDispatcher.dispatchEvent(windowEvent);
			}
			
			private function closePublishWindow():void{
//				publishWindow.close();
			}

			private function startPublishing(e:StartBroadcastEvent):void{
//			    LogUtil.debug("Publishing stream to: " + proxy.connection.uri + "/" + e.stream);
//				proxy.startPublishing(e);
				var broadcastEvent:BroadcastStartedEvent = new BroadcastStartedEvent();
				broadcastEvent.stream = e.stream;
				broadcastEvent.userid = UsersUtil.getMyUserID();
//				globalDispatcher.dispatchEvent(broadcastEvent);
//				publishWindow.title = UsersUtil.getMyUsername() + " (you)";
				_publishing = true;
				button.publishingStatus(button.START_PUBLISHING);

			}
			
			private function stopPublishing(e:StopBroadcastEvent):void{
				if (_publishing) {
//					proxy.stopBroadcasting();
					
					var broadcastEvent:BroadcastStoppedEvent = new BroadcastStoppedEvent();
//					broadcastEvent.stream = publishWindow.streamName;
					broadcastEvent.userid = UsersUtil.getMyUserID();
					globalDispatcher.dispatchEvent(broadcastEvent);
					_publishing = false;
				}
				
				//Make toolbar button enabled again
				button.publishingStatus(button.STOP_PUBLISHING);
				//button.show();
			}
			
			public function stopModule():void {
				closeAllWindows();
//				proxy.disconnect();
			}
			
			public function closeAllWindows():void{
//				if (publishWindow != null) {
//					proxy.stopBroadcasting();
//					publishWindow.close();
//				}
				globalDispatcher.dispatchEvent(new CloseAllWindowsEvent());
			}
			
			private function switchToPresenter():void{
				if (videoOptions.presenterShareOnly){
					button.isPresenter = true;
				}
			}
			
			private function switchToViewer():void{
				if (videoOptions.presenterShareOnly){
					button.isPresenter = false;
//					if (publishWindow != null) publishWindow.close();
				}
			}
					
		]]>
	</mx:Script>
	
	<EventHandlers type="{ShareCameraRequestEvent.SHARE_CAMERA_REQUEST}">
		<InlineInvoker method="openPublishWindow" />
	</EventHandlers>

	<EventHandlers type="{ClosePublishWindowEvent.CLOSE_PUBLISH_WINDOW}">
		<InlineInvoker method="closePublishWindow" />
	</EventHandlers>
	
	<EventHandlers type="{StartBroadcastEvent.START_BROADCAST}" >
		<InlineInvoker method="startPublishing" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{StopBroadcastEvent.STOP_BROADCASTING}" >
		<InlineInvoker method="stopPublishing" arguments="{event}" />
	</EventHandlers>

	<EventHandlers type="{BBBEvent.START_VIDEO_STREAM}" >
		<InlineInvoker method="viewVideoFile" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{BBBEvent.START_VIDEO_CONNECTION}">
		<InlineInvoker method="mockConnect" />
	</EventHandlers>
 
	<EventHandlers type="{StreamStartedEvent.STREAM_STARTED}">
		<InlineInvoker method="viewCamera" arguments="{[event.userID, event.stream, event.user]}" />
	</EventHandlers>
	
	<EventHandlers type="{ViewCameraEvent.VIEW_CAMERA_EVENT}">
		<InlineInvoker method="viewCamera" arguments="{[event.userid, event.stream, event.viewedName]}" />
	</EventHandlers>
	
	<EventHandlers type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" >
		<InlineInvoker method="switchToPresenter" />	
	</EventHandlers>
	
	<EventHandlers type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}">
		<InlineInvoker method="switchToViewer" />
	</EventHandlers>
	
</EventMap>
