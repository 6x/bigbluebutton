<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<business:VideoWindowItf
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:pubVid="org.bigbluebutton.modules.videoconf.business.*"
  xmlns:dock="org.bigbluebutton.modules.videodock.views.*"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	creationComplete="onCreationComplete()"
	width="{defaultWidth + 6}" height="{defaultHeight + 75}" 
	xmlns:mate="http://mate.asfusion.com/"
	resize="onResize()"  backgroundImage="{avatar}"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	layout="absolute" xmlns:business="org.bigbluebutton.modules.videodock.business.*">
	
  <mate:Listener type="{EventConstants.USER_TALKING}" method="handleUserTalkingEvent" />
  <mate:Listener type="{EventConstants.NEW_ROLE}" method="handleNewRoleEvent" />
  
	<mx:Script>
		<![CDATA[
      import flexlib.mdi.events.MDIWindowEvent;      
      import mx.core.UIComponent;
      import mx.events.ResizeEvent;      
      import org.bigbluebutton.common.Images;
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.common.Role;
      import org.bigbluebutton.common.events.CloseWindowEvent;
      import org.bigbluebutton.common.events.LocaleChangeEvent;
      import org.bigbluebutton.core.EventConstants;
      import org.bigbluebutton.core.UsersUtil;
      import org.bigbluebutton.core.events.CoreEvent;
      import org.bigbluebutton.core.managers.UserManager;
      import org.bigbluebutton.main.views.MainCanvas;
      import org.bigbluebutton.modules.videodock.business.TalkingButtonOverlay;
      import org.bigbluebutton.modules.videodock.events.CloseAllWindowsEvent;
      import org.bigbluebutton.modules.videodock.events.OpenVideoWindowEvent;
      import org.bigbluebutton.modules.videodock.events.StartBroadcastEvent;
      import org.bigbluebutton.modules.videodock.events.StopBroadcastEvent;
      import org.bigbluebutton.modules.videodock.model.VideoConfOptions;
      import org.bigbluebutton.util.i18n.ResourceUtil;
      
			[Bindable] public var camIcon:Class = images.control_play;
			[Bindable] public var bbbLogo:Class = images.bbb_logo;

			[Bindable] private var defaultWidth:Number = 320;
			[Bindable] private var defaultHeight:Number = 240;
			         
//			private var camWidth:Number = 320;
//			private var camHeight:Number = 240;
//			private var _camera:Camera = null;
			public var quality:Number = 0;
						
      private var camSettings:CameraSettings = new CameraSettings();
			
			private var videoOptions:VideoConfOptions = new VideoConfOptions();
			
			private function onCreationComplete():void{
				_videoHolder = new UIComponent();
				_videoHolder.width = camWidth;
				_videoHolder.height = camHeight;
				this.addChild(_videoHolder);				
        
				this.title = ResourceUtil.getInstance().getString('bbb.publishVideo.title');

				if (! UsersUtil.amIPresenter() && Camera.names.length == 1) {
          startPublishing();
        }

				this.minWidth = _minWidth;
				this.minHeight = _minHeight;
				maximizeRestoreBtn.visible = false;
				this.resizable = false;
				
				loadPrefs();
				
				this.visible = videoOptions.publishWindowVisible;
				
				if (videoOptions.autoStart) {
					/*
					 * Need to have a timer to trigger auto-publishing of webcam.
					 */
					autoPublishTimer = new Timer(3000, 1);
					autoPublishTimer.addEventListener(TimerEvent.TIMER, autopublishTimerHandler);
					autoPublishTimer.start();
				}
				
				// start the camera preview
				updateCamera();
			}

			private function autopublishTimerHandler(event:TimerEvent):void {				
				startPublishing();
				autoPublishTimer.stop();
			}
			
      private function handleNewRoleEvent(event:CoreEvent):void {
        switchRole(event.message.role == Role.PRESENTER)
      }
      
      private function handleUserTalkingEvent(event:CoreEvent):void {
        if (event.message.userID ==  sharerUserID) {
          if (event.message.talking) {
            notTalkingEffect.end();
            talkingEffect.play([_videoHolder]);            
          } else {
            talkingEffect.end();
            notTalkingEffect.play([_videoHolder]);
          }
        }
      }
      
			private function loadPrefs():void {
				var sharedObject:SharedObject = SharedObject.getLocal("bbbUserProperties", "/");
				var webcam:String = sharedObject.data["webcam"] as String;
				for (var i:Number = 0; i < Camera.names.length; i++){
					if (Camera.names[i] == webcam) controls.cmbCameraSelector.selectedIndex = i;
				}
			}
			
			private function updateCamera():void {
				stopCamera();
			
        controls.btnStartPublish.enabled = false;
				
				if (Camera.names.length == 0) {
					showWarning('bbb.video.publish.hint.noCamera');
					return;
				}
				
				_camera = camSettings.useCamera(controls.cmbCameraSelector.selectedIndex.toString());
        
				if (_camera == null) {
					showWarning('bbb.video.publish.hint.cantOpenCamera');
					return;
				}
							
				_video = new Video;
				_video.attachCamera(_camera);

				if (aspectRatio > _videoHolder.width / _videoHolder.height) {
					_video.width = _videoHolder.width;
					_video.height = _videoHolder.width / aspectRatio;
					_video.x = 0;
					_video.y = (_videoHolder.height - _video.height) / 2;
				} else {
					_video.width = _videoHolder.height * aspectRatio;
					_video.height = _videoHolder.height;
					_video.x = (_videoHolder.width - _video.width) / 2;
					_video.y = 0;
				}				

				_videoHolder.addChild(_video);
        
   		}
   		      						
			private function startPublishing():void{
				if (_camera == null) return;

				if (autoPublishTimer != null)
					autoPublishTimer.stop();

				showWarning('bbb.video.publish.hint.publishing', true, "0xFFFF00");
				
				defaultWidth = originalWidth;
				defaultHeight = originalHeight;

				var e:StartBroadcastEvent = new StartBroadcastEvent();
				e.stream = this.streamName;
				e.camera = _camera;
				dispatchEvent(e);
				
        controls.showVideoControls(false);
        controls.showResControls(false);

				maximizeRestoreBtn.visible = true;
				this.resizable = true;
				onResize();
				
				addEventListener(MDIWindowEvent.RESIZE_START, onResizeStart);
				addEventListener(MDIWindowEvent.RESIZE_END, onResizeEnd);
				addEventListener(MouseEvent.MOUSE_OVER, showButtons);
				addEventListener(MouseEvent.MOUSE_OUT, hideButtons);
				addEventListener(MouseEvent.DOUBLE_CLICK, onDoubleClick);
				
        // Store the userid for the publisher. This allows us to control
        // the user's status from the video window
        sharerUserID = UsersUtil.getMyUserID();
				
        createButtons();
        addControlButtons();
        
				// this event will dock the window, if it's enabled
				var openVideoEvent:OpenVideoWindowEvent = new OpenVideoWindowEvent();
				openVideoEvent.window = this;
				dispatchEvent(openVideoEvent);					
			}
			
			override public function close(event:MouseEvent=null):void{
				stopPublishing();
				super.close(event);
			}
			
			private function stopCamera():void {
				if (_video != null) {
					_videoHolder.removeChild(_video);
					_video.attachCamera(null);
					_video.clear();
					_video = null;
				}
				_camera = null;
			}
			
			private function stopPublishing():void{
				stopCamera();
				var e:StopBroadcastEvent = new StopBroadcastEvent()
				e.stream = streamName;
				dispatchEvent(e);
			}
					
			private function closeWindow(e:CloseAllWindowsEvent):void{
				closeThisWindow();
			}
			
			private function closeThisWindow():void {
				stopCamera();
				this.close();
			}
						
			
			private var hideWarningTimer:Timer = null;
			
			private function showWarning(resourceName:String, autoHide:Boolean=false, color:String="0xFF0000"):void {
				const text:String = ResourceUtil.getInstance().getString(resourceName);
				
				if (hideWarningTimer != null) {
          hideWarningTimer.stop();
        }
					        
				if (autoHide) {
					hideWarningTimer = new Timer(3000, 1);
					hideWarningTimer.addEventListener(TimerEvent.TIMER, hideWarning);
					hideWarningTimer.start();
				}
        
				// bring the label to front
				setChildIndex(lblWarning, getChildren().length - 1);
				lblWarning.text = text;
				lblWarning.setStyle("color", color);
				lblWarning.visible = true;
				LogUtil.debug("Showing warning: " + text);
			}
			
			private function hideWarning(e:TimerEvent):void {
				lblWarning.visible = false;
			}
			
		]]>
	</mx:Script>

  <mx:Glow id="talkingEffect" duration="500" alphaFrom="1.0" alphaTo="0.3" blurXFrom="0.0" blurXTo="30.0" blurYFrom="0.0" blurYTo="30.0" color="0xFF0000"/>
  <mx:Glow id="notTalkingEffect" duration="500" alphaFrom="0.3" alphaTo="1.0" blurXFrom="30.0" blurXTo="0.0" blurYFrom="30.0" blurYTo="0.0" color="0xFF0000"/>
  
	<mx:Fade id="dissolveOut" duration="1000" alphaFrom="1.0" alphaTo="0.0"/>
	<mx:Fade id="dissolveIn" duration="1000" alphaFrom="0.0" alphaTo="1.0"/>
  
	<mx:Text id="lblWarning" width="100%" textAlign="right" fontSize="14" fontWeight="bold" 
           y="{this.height - (videoOptionsBar.visible? videoOptionsBar.height: 0) - lblWarning.height - 30}" 
           visible="false" selectable="false" hideEffect="{dissolveOut}" showEffect="{dissolveIn}"/>

  <dock:CamPublishOptionsControlBar id="controls"/>
	
	<mate:Listener type="{CloseAllWindowsEvent.CLOSE_ALL_WINDOWS}" method="closeWindow" />
</business:VideoWindowItf>
