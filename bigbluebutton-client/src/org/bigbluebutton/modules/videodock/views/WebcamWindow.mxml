<?xml version="1.0" encoding="utf-8"?>
<ns:MDIWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
              xmlns:ns="http://code.google.com/p/flexlib/" 
              xmlns:dock="org.bigbluebutton.modules.videodock.views.*"
              implements="org.bigbluebutton.common.IBbbModuleWindow"
              creationComplete="onCreationComplete()"
              layout="absolute">
  <mx:Script>
    <![CDATA[
      import com.asfusion.mate.events.Dispatcher;
      
      import flexlib.mdi.events.MDIWindowEvent;
      
      import mx.core.UIComponent;
      
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.main.views.MainCanvas;
      import org.bigbluebutton.modules.videoconf.views.Avatar;
      import org.bigbluebutton.modules.videodock.events.VideoDisplayReadyEvent;
      import org.bigbluebutton.modules.videodock.model.VideoConfOptions;
      
      public var userID:String;
      public var isPublishWindow:Boolean = false;
      
      static public var PADDING_HORIZONTAL:Number = 6;
      static public var PADDING_VERTICAL:Number = 29;
      
      public static const WEBCAM_WINDOW:String = "WEBCAM_WINDOW";
      
      private var _mediator:WindowMediator;
      private var _avatarDisplay:AvatarDisplay = new AvatarDisplay();
      private var _publishDisplay:PublishDisplay = new PublishDisplay();
      
      public function getWindowType():String {
        return WEBCAM_WINDOW;
      }
      
      public function publish(camIndex:int, camWidth:int, camHeight:int):void {
        _displayHolder.removeChild(_avatarDisplay);
        _publishDisplay.width = _displayHolder.width;
        _publishDisplay.height = _displayHolder.height;
        
        _displayHolder.addChild(_publishDisplay);
        
        trace("cam index=[" + camIndex + "] dim=[" + camWidth + "x" + camHeight +"]");
        var videoOptions:VideoConfOptions = new VideoConfOptions();
        var _camera:Camera = Camera.getCamera("0");
        if (_camera == null) {
          trace("CAMERA IS NULL!!!");
        } else {
          trace("CAMERA IS NOT NULL!!!");
        }
        _camera.setMotionLevel(5, 1000);
        _camera.setKeyFrameInterval(videoOptions.camKeyFrameInterval);
        _camera.setMode(camWidth, camHeight, videoOptions.camModeFps);
        _camera.setQuality(videoOptions.camQualityBandwidth, videoOptions.camQualityPicture);
        
        _publishDisplay.publish(_camera);
               
      }
      
      private function onCreationComplete():void {
        addEventListener(MDIWindowEvent.RESIZE_START, onResizeStart);
        addEventListener(MDIWindowEvent.RESIZE_END, onResizeEnd);
 //       addEventListener(MDIWindowEvent.CLOSE, onCloseEvent);
        
        addEventListener(MouseEvent.MOUSE_OVER, showButtons);
        addEventListener(MouseEvent.MOUSE_OUT, hideButtons);
        addEventListener(MouseEvent.DOUBLE_CLICK, onDoubleClick);
        
        _mediator = new WindowMediator(this);
        _displayHolder.addChild(_avatarDisplay);
        _mediator.setDisplayContainer(_displayHolder);
        
        var readyEvent:VideoDisplayReadyEvent = new VideoDisplayReadyEvent(VideoDisplayReadyEvent.DISPLAY_READY);
        readyEvent.userID = userID;
        
        var globalDispatcher:Dispatcher = new Dispatcher();
        globalDispatcher.dispatchEvent(readyEvent);
      }
      
      public function getPrefferedPosition():String {
          return MainCanvas.ABSOLUTE;
      }
      
      private function onResizeStart(event:MDIWindowEvent = null):void {
        _mediator.onResizeStart();
      }
      
      private function onResizeEnd(event:MDIWindowEvent = null):void {
        _mediator.onResizeEnd();
      }
      
      public function updateWidth():void {
        _mediator.updateWidth();
      }
      
      public function updateHeight():void {
        _mediator.updateHeight();
      }
      
      private function showButtons(event:MouseEvent = null):void {
//        if (controlButtons.visible == false) {
//          controlButtons.visible = true;
//          updateButtonsPosition();
 //       }
      }
      
      private function hideButtons(event:MouseEvent = null):void {
//        if (controlButtons.visible == true) {
//          controlButtons.visible = false;
//          updateButtonsPosition();
 //       }
      }
      
//      public function close(event:MouseEvent = null):void{
//        var e:CloseWindowEvent = new CloseWindowEvent();
//        e.window = this;
//        dispatchEvent(e);
        
//        super.close(event);
//      }
      
      private function onDoubleClick(event:MouseEvent = null):void {
        // it occurs when the window is docked, for example
        if (!this.maximizeRestoreBtn.visible) return;
        
        this.maximizeRestore();
      }
      
    ]]>
  </mx:Script>

  <mx:Canvas id="_displayHolder" borderColor="blue" backgroundColor="red"/>
</ns:MDIWindow>
